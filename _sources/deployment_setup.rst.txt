Deployment Steps to Heroku with CircleCI and DockerHub
======================================================

Step 1: Create Heroku Account
------------------------------

1. Visit the Heroku website at `https://www.heroku.com/ <https://www.heroku.com/>`_.
2. Sign up for a free Heroku account if you don't have one already.

Step 2: Install Heroku CLI
---------------------------

1. Install the Heroku Command Line Interface (CLI) by following the instructions provided at `https://devcenter.heroku.com/articles/heroku-cli <https://devcenter.heroku.com/articles/heroku-cli>`_.

Step 3: Prepare Django App for Deployment
------------------------------------------

1. Ensure that your Django project is configured properly for deployment.
2. Make sure you have a ``requirements.txt`` file listing all the project dependencies.
3. Create a ``Procfile`` in the root directory of your project to specify the commands to run your application.

   Example ``Procfile``::

       web: gunicorn your_project_name.wsgi --log-file -

Step 4: Initialize Git Repository
----------------------------------

1. If your project is not already under version control, initialize a Git repository in your project directory.

   .. code-block:: bash

       git init

2. Add your project files to the repository and commit them.

   .. code-block:: bash

       git add .
       git commit -m "Initial commit"

Step 5: Set Up CircleCI Configuration
--------------------------------------

1. Create a ``.circleci/config.yml`` file in the root directory of your project.
2. Copy and paste the following configuration into the ``config.yml`` file:

   .. code-block:: yaml

       version: 2.1
       orbs:
         heroku: circleci/heroku@2.0.0

       jobs:
         build:
           docker:
             - image: python:3.8-slim-buster
           working_directory: $CIRCLE_WORKING_DIRECTORY
           steps:
             - checkout
             - run:
                 name: Install Python dependencies
                 command: |
                   python3 -m venv venv
                   . venv/bin/activate
                   pip install --upgrade pip
                   pip install -r requirements.txt
             - save_cache:
                 key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
                 paths:
                   - "venv"
             - run:
                 name: Run pytest
                 command: |
                   source venv/bin/activate && pytest

         containerise:
           machine:
             enabled: true
           steps:
             - checkout
             - run:
                 name: Authenticate with Docker Hub
                 command: |
                   echo "$DOCKER_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
             - run:
                 name: Build Docker image
                 command: |
                   docker build --tag ${DOCKERHUB_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} .
             - run:
                 name: Push Docker image to Docker Hub
                 command: |
                   docker push ${DOCKERHUB_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}

         deploy-prod:
           executor: heroku/default
           steps:
             - checkout
             - heroku/deploy-via-git

       workflows:
         build_and_deploy_workflow:
           jobs:
             - build
             - containerise:
                 requires:
                   - build
                 filters:
                   branches:
                     only:
                       - master
             - deploy-prod:
                 requires:
                   - containerise
                 filters:
                   branches:
                     only:
                       - master

Step 6: Commit CircleCI Configuration Changes
----------------------------------------------

1. Commit the ``.circleci/config.yml`` file to your Git repository.

   .. code-block:: bash

       git add .circleci/config.yml
       git commit -m "Add CircleCI configuration for automated deployment"

Step 7: Deploy Your Django App
-------------------------------

1. After completing the CircleCI configuration, push your code changes to trigger the CI/CD pipeline.

   .. code-block:: bash

       git push origin master

2. CircleCI will automatically build and test your Django app, containerize it using Docker, and push the Docker image to DockerHub.

3. Finally, Heroku will deploy your Dockerized app to production.

Step 8: Verify Deployment
--------------------------

1. Once the deployment is complete, verify that the Django app is running smoothly on Heroku.

2. Access the deployed app using the URL provided by Heroku.

Conclusion
----------

This documentation provides a detailed guide for deploying your Django app to Heroku using CircleCI for continuous integration, DockerHub for Docker image hosting, and Heroku for application deployment. By following these steps, you can efficiently manage and deploy your Django app in a cloud environment.

CircleCI Environment Variables
-------------------------------

- ``$CIRCLE_WORKING_DIRECTORY``: Represents the working directory in which CircleCI runs the job.
- ``$DOCKER_PASSWORD``: Docker Hub password used for authentication during image push.
- ``$DOCKERHUB_USERNAME``: Docker Hub username used for authentication during image push.
- ``$CIRCLE_PROJECT_REPONAME``: Name of the repository in which the CircleCI pipeline is running.
- ``$CIRCLE_SHA1``: SHA-1 hash of the current Git commit.
- ``$HEROKU_API_KEY``: API key used to authenticate with the Heroku API.
